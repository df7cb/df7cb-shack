options:
  parameters:
    author: DM6AS, DF7CB
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: qo100_local
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: qo100
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 20.0]
    rotation: 0
    state: enabled

blocks:
- name: af_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 29,0,1,1
    label: af_gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '5'
    stop: '200'
    value: '20'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 28.0]
    rotation: 0
    state: true
- name: decim
  id: variable
  parameters:
    comment: ''
    value: '11'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 124.0]
    rotation: 0
    state: enabled
- name: high_cutoff_gauge
  id: qtgui_levelgauge
  parameters:
    affinity: ''
    alias: ''
    backgroundColor: default
    barColor: default
    comment: ''
    fontColor: default
    gui_hint: ''
    isVertical: 'False'
    label: ''
    maximum: '3000'
    minimum: '0'
    msize: '100'
    position: '1'
    scaleFactor: '1'
    showValue: 'True'
    type: int
    value: '3000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 292.0]
    rotation: 0
    state: true
- name: low_cutoff_gauge
  id: qtgui_levelgauge
  parameters:
    affinity: ''
    alias: ''
    backgroundColor: default
    barColor: default
    comment: ''
    fontColor: default
    gui_hint: ''
    isVertical: 'False'
    label: ''
    maximum: '3000'
    minimum: '0'
    msize: '100'
    position: '1'
    scaleFactor: '1'
    showValue: 'True'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 172.0]
    rotation: 0
    state: true
- name: mag
  id: variable
  parameters:
    comment: ''
    value: '0.9'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 36.0]
    rotation: 0
    state: true
- name: rx0_high_cutoff
  id: variable
  parameters:
    comment: 'RX bandpass

      high edge'
    value: '3000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 308.0]
    rotation: 0
    state: true
- name: rx0_low_cutoff
  id: variable
  parameters:
    comment: 'RX bandpass

      low edge'
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 188.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: decim*48e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 36.0]
    rotation: 0
    state: enabled
- name: tx_power
  id: variable
  parameters:
    comment: TX power
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 60.0]
    rotation: 0
    state: true
- name: tx_power_gauge
  id: qtgui_levelgauge
  parameters:
    affinity: ''
    alias: ''
    backgroundColor: default
    barColor: default
    comment: ''
    fontColor: default
    gui_hint: ''
    isVertical: 'False'
    label: TX Power
    maximum: '100'
    minimum: '0'
    msize: '100'
    position: '1'
    scaleFactor: '100'
    showValue: 'True'
    type: real
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 36.0]
    rotation: 0
    state: true
- name: tx_vfo
  id: qtgui_msgdigitalnumbercontrol
  parameters:
    ThousandsSeparator: .
    affinity: ''
    alias: ''
    comment: TX VFO frequency display
    gui_hint: ''
    lbl: TX
    maxFreqHz: 510e3
    maxoutbuf: '0'
    minFreqHz: -10e3
    minoutbuf: '0'
    outputmsgname: freq
    readOnly: 'False'
    relBackgroundColor: black
    relFontColor: white
    value: 40e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 428.0]
    rotation: 0
    state: true
- name: vfo
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 14,0,1,1
    label: vfo
    min_len: '150'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-10'
    step: '0.1'
    stop: '510'
    value: '40'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 28.0]
    rotation: 0
    state: disabled
- name: vfo
  id: qtgui_msgdigitalnumbercontrol
  parameters:
    ThousandsSeparator: .
    affinity: ''
    alias: ''
    comment: RX VFO frequency display
    gui_hint: ''
    lbl: RX
    maxFreqHz: 510e3
    maxoutbuf: '0'
    minFreqHz: -10e3
    minoutbuf: '0'
    outputmsgname: freq
    readOnly: 'False'
    relBackgroundColor: black
    relFontColor: white
    value: 40e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 812.0]
    rotation: 0
    state: true
- name: zmq_watermark
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 124.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: info
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1616, 752.0]
    rotation: 0
    state: disabled
- name: blocks_swapiq_0
  id: blocks_swapiq
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    datatype: complex
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 580.0]
    rotation: 0
    state: true
- name: control
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nimport\
      \ os\nimport pulsectl\n\n# buttons (notes)\nMIDI_FT8_QRG = 2 # KP 2 A\nMIDI_SHIFT_FT8_QRG\
      \ = 6 # Shift-KP 2 A\nMIDI_SYNC_A = 35\nMIDI_SHIFT_SYNC_A = 38\nMIDI_RECORD\
      \ = 43\n\nMIDI_AUDIO_HEADPHONES = 49 # KP 1 B\nMIDI_AUDIO_SPEAKER = 51 # KP\
      \ 3 B\nMIDI_AUDIO_STEREO = 52 # KP 4 B\nMIDI_AUDIOS = [MIDI_AUDIO_HEADPHONES,\
      \ MIDI_AUDIO_STEREO, MIDI_AUDIO_SPEAKER]\n\n# controls\nMIDI_VFO_A = 48 # Jog\
      \ A\nMIDI_SHIFT_VFO_A = 55 # Shift-Jog A\nMIDI_POWER = 54 # Sync A\nMIDI_VOLUME\
      \ = 57 # Volume A\nMIDI_BANDPASS_CENTER = 59 # Medium A\nMIDI_BANDPASS_WIDTH\
      \ = 60 # Bass A\nMIDI_REPORT_ALL_CONTROLS = 0x7f\n\nclass blk(gr.sync_block):\n\
      \    \"\"\"TRX Control block\"\"\"\n\n    def __init__(self):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='Control',\n            in_sig=None,\n            out_sig=None,\n\
      \        )\n\n        self.message_port_register_in(pmt.intern(\"midi_in\"))\n\
      \        self.set_msg_handler(pmt.intern(\"midi_in\"), self.midi_in)\n     \
      \   self.message_port_register_in(pmt.intern(\"rx_freq_in\"))\n        self.set_msg_handler(pmt.intern(\"\
      rx_freq_in\"), self.rx_freq_in)\n        self.message_port_register_in(pmt.intern(\"\
      tx_freq_in\"))\n        self.set_msg_handler(pmt.intern(\"tx_freq_in\"), self.tx_freq_in)\n\
      \n        self.message_port_register_out(pmt.intern(\"midi_out\"))\n       \
      \ self.message_port_register_out(pmt.intern(\"rx_freq_out\"))\n        self.message_port_register_out(pmt.intern(\"\
      tx_freq_out\"))\n\n        self.rx0_freq = 40000.0\n        self.tx_freq = 40000.0\n\
      \        self.filter_center = 850\n        self.filter_bw = 3000\n        self.record\
      \ = False\n        self.sync_a = False # start false so set_sync_a sets the\
      \ LEDs\n\n        self.pulse = None\n\n    def note_on(self, note, velocity):\n\
      \        self.message_port_pub(pmt.intern(\"midi_out\"),\n                pmt.cons(pmt.intern('note_on'),\n\
      \                    pmt.cons(pmt.from_long(note), pmt.from_long(velocity))))\n\
      \n    def start(self):\n        self.pulse = pulsectl.Pulse('qo100')\n\n   \
      \     # MIDI\n        self.set_sync_a(True)\n        self.set_rx_freq(40000.0)\n\
      \        self.set_tx_freq(40000.0)\n        self.set_record(False)\n\n     \
      \   # Audio output\n        self.set_audio_output(MIDI_AUDIO_SPEAKER, 'Unitek\
      \ Y')\n\n        # read out knobs and slider on startup\n        self.message_port_pub(pmt.intern(\"\
      midi_out\"),\n                pmt.cons(pmt.intern('control_change'),\n     \
      \               pmt.cons(pmt.from_long(MIDI_REPORT_ALL_CONTROLS), pmt.from_long(127))))\n\
      \n        # without this, the spectrum display updates only once per second\
      \ (GR bug?)\n        self.tb.vfo0_spectrum.set_fft_size(2048)\n\n        # create\
      \ temp directory\n        try: os.mkdir(\"/run/user/1000/gnuradio\")\n     \
      \   except: pass\n\n    def set_audio_volume(self, new_volume):\n        try:\n\
      \            rx2_sink_index = [x.index for x in self.pulse.sink_list() if x.description\
      \ == 'rx2'][0]\n            # the rx0 sink is the one not connected to rx2\n\
      \            rx0_sink = [self.pulse.sink_info(x.sink) for x in self.pulse.sink_input_list()\
      \ if int(x.proplist.get('application.process.id')) == os.getpid() and x.sink\
      \ != rx2_sink_index][0]\n            rx0_sink.volume.value_flat = new_volume\n\
      \            self.pulse.sink_volume_set(rx0_sink.index, rx0_sink.volume)\n \
      \       except Exception as e:\n            print(\"Error setting volume:\"\
      , e)\n\n    def set_audio_output(self, midi_key, sink_name):\n        try:\n\
      \            rx2_sink_index = [x.index for x in self.pulse.sink_list() if x.description\
      \ == 'rx2'][0]\n            # the rx0 sink is the one not connected to rx2\n\
      \            rx0_audio = [x.index for x in self.pulse.sink_input_list() if int(x.proplist.get('application.process.id'))\
      \ == os.getpid() and x.sink != rx2_sink_index][0]\n\n            for sink in\
      \ self.pulse.sink_list():\n                if sink_name in sink.description:\n\
      \                    self.pulse.sink_input_move(rx0_audio, sink.index)\n   \
      \                 break\n\n            for key in MIDI_AUDIOS:\n           \
      \     self.note_on(key, 127 if key == midi_key else 0)\n\n        except Exception\
      \ as e:\n            print(f\"Error setting audio output to {sink_name}:\",\
      \ e)\n\n    def set_audio_input(self, source_name):\n        try:\n        \
      \    tx_audio = [x.index for x in self.pulse.source_output_list() if int(x.proplist.get('application.process.id'))\
      \ == os.getpid()][0]\n\n            for source in self.pulse.source_list():\n\
      \                if source.description.startswith(source_name):\n          \
      \          self.pulse.source_output_move(tx_audio, source.index)\n         \
      \           break\n        except Exception as e:\n            print(f\"Error\
      \ setting audio input to {source_name}:\", e)\n\n    def set_record(self, record):\n\
      \        self.record = record\n        self.note_on(MIDI_RECORD, 127 if self.record\
      \ else 0)\n        if self.record:\n            self.set_audio_input('Plantronics')\n\
      \        else:\n            self.set_audio_input('Monitor of tx0')\n\n    def\
      \ set_rx_freq(self, freq):\n        self.message_port_pub(pmt.intern(\"rx_freq_out\"\
      ),\n                pmt.cons(pmt.intern('freq'), pmt.from_double(freq)));\n\n\
      \    def set_tx_freq(self, freq):\n        self.message_port_pub(pmt.intern(\"\
      tx_freq_out\"),\n                pmt.cons(pmt.intern('freq'), pmt.from_double(freq)));\n\
      \n    def set_sync_a(self, sync_a):\n        if self.sync_a != sync_a:\n   \
      \         self.sync_a = sync_a\n            self.note_on(MIDI_SYNC_A, 127 if\
      \ sync_a else 0)\n            self.note_on(MIDI_SHIFT_SYNC_A, 127 if sync_a\
      \ else 0)\n            if sync_a:\n                self.set_tx_freq(self.rx0_freq)\n\
      \n    def rx_freq_in(self, msg):\n        if msg.is_pair() and pmt.car(msg)\
      \ == pmt.intern('freq'):\n            self.rx0_freq = int(pmt.to_double(pmt.cdr(msg)))\n\
      \            if self.sync_a:\n                self.set_tx_freq(self.rx0_freq)\n\
      \n    def tx_freq_in(self, msg):\n        if msg.is_pair() and pmt.car(msg)\
      \ == pmt.intern('freq'):\n            tx_freq = int(pmt.to_double(pmt.cdr(msg)))\n\
      \n            if (tx_freq == 40000) != (self.tx_freq == 40000):\n          \
      \      # FT8 frequency indicator LED\n                self.note_on(MIDI_FT8_QRG,\
      \ 127 if tx_freq == 40000 else 0)\n                self.note_on(MIDI_SHIFT_FT8_QRG,\
      \ 127 if tx_freq == 40000 else 0)\n\n            self.tx_freq = tx_freq\n\n\
      \            if self.tx_freq != self.rx0_freq:\n                self.set_sync_a(False)\n\
      \n            freqfile = open(\"/run/user/1000/gnuradio/qo100.qrg\", \"w\")\n\
      \            freqfile.write(str(tx_freq + 2400000000) + \"\\n\")\n         \
      \   # fake frequency on 10m so tlf can deal with it\n            #freqfile.write(str(tx_freq\
      \ + 28000000) + \"\\n\")\n            freqfile.close()\n\n    def midi_in(self,\
      \ msg):\n        if not msg.is_pair(): return\n        msgtype = str(pmt.car(msg))\n\
      \n        if msgtype == 'control_change':\n            payload = pmt.cdr(msg)\n\
      \            control = pmt.to_long(pmt.car(payload))\n            value = pmt.to_long(pmt.cdr(payload))\n\
      \n            if control == MIDI_VFO_A: # jog A\n                delta = value\
      \ if value < 64 else value - 128\n                self.set_rx_freq(self.rx0_freq\
      \ + delta * 20)\n\n            elif control == MIDI_SHIFT_VFO_A and value !=\
      \ 64: # shift-jog a (64 reported on all-buttons-readout, ignore that)\n    \
      \            delta = value if value < 64 else value - 128\n                self.set_sync_a(False)\n\
      \                self.set_tx_freq(self.tx_freq + delta * 20)\n\n           \
      \ elif control == MIDI_VOLUME:\n                self.set_audio_volume(value\
      \ / 100.0) # 0 .. 127%\n\n            elif control in (MIDI_BANDPASS_CENTER,\
      \ MIDI_BANDPASS_WIDTH): # medium A, bass A\n                if control == MIDI_BANDPASS_CENTER:\n\
      \                    self.filter_center = 100 + int(2800 * (value / 127.0))\n\
      \                if control == MIDI_BANDPASS_WIDTH:\n                    self.filter_bw\
      \ = 100 + int(2900 * (value / 127.0))\n\n                low_cutoff = max(self.filter_center\
      \ - self.filter_bw // 2, 0)\n                high_cutoff = min(self.filter_center\
      \ + self.filter_bw // 2, 3000)\n                self.tb.set_rx0_low_cutoff(low_cutoff)\n\
      \                self.tb.set_rx0_high_cutoff(high_cutoff)\n\n            if\
      \ control == MIDI_POWER:\n                power = 0.1 + 0.9 * (value/127.0)\n\
      \                self.tb.set_tx_power(power)\n\n        elif msgtype == 'note_on':\n\
      \            payload = pmt.cdr(msg)\n            note = pmt.to_long(pmt.car(payload))\n\
      \            velocity = pmt.to_long(pmt.cdr(payload))\n\n            if note\
      \ == MIDI_SYNC_A and velocity == 127: # Sync A\n                self.set_sync_a(not\
      \ self.sync_a)\n\n            elif note == MIDI_SHIFT_SYNC_A and velocity ==\
      \ 127: # Shift-Sync A\n                if not self.sync_a:\n               \
      \     # set RX from TX\n                    self.set_rx_freq(self.tx_freq)\n\
      \                self.set_sync_a(not self.sync_a)\n\n            elif note ==\
      \ MIDI_FT8_QRG and velocity == 127: # KP 2 A\n                self.set_rx_freq(40000)\n\
      \                self.set_sync_a(True)\n                self.set_record(False)\n\
      \n            elif note == MIDI_AUDIO_HEADPHONES and velocity == 127: # KP 1\
      \ A\n                self.set_audio_output(MIDI_AUDIO_HEADPHONES, 'Plantronics')\n\
      \n            elif note == MIDI_AUDIO_STEREO and velocity == 127: # KP 3 A\n\
      \                self.set_audio_output(MIDI_AUDIO_STEREO, 'Internes Audio Analog\
      \ Stereo')\n\n            elif note == MIDI_AUDIO_SPEAKER and velocity == 127:\
      \ # KP 4 A\n                self.set_audio_output(MIDI_AUDIO_SPEAKER, 'Unitek\
      \ Y')\n\n            if note == MIDI_RECORD and velocity == 127: # REC\n   \
      \             self.set_record(not self.record)\n\nif __name__ == '__main__':\n\
      \    blk()\n"
    affinity: ''
    alias: ''
    comment: Control logic
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Control', 'blk', [], [('tx_freq_in', 'message', 1), ('rx_freq_in',
      'message', 1), ('midi_in', 'message', 1)], [('tx_freq_out', 'message', 1), ('rx_freq_out',
      'message', 1), ('midi_out', 'message', 1)], 'TRX Control block', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 576.0]
    rotation: 180
    state: true
- name: ft4_sink
  id: blocks_wavfile_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    bits_per_sample1: FORMAT_PCM_16
    bits_per_sample2: FORMAT_PCM_16
    bits_per_sample3: FORMAT_VORBIS
    bits_per_sample4: FORMAT_PCM_16
    comment: FT4 file output
    file: /dev/null
    format: FORMAT_WAV
    nchan: '1'
    samp_rate: '12000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 1132.0]
    rotation: 0
    state: enabled
- name: ft84_cron
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport pmt\nimport time\nimport threading\n\
      \nclass blk(gr.basic_block):\n    \"\"\"Send Timed Msgs\"\"\"\n\n    def __init__(self):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='Send\
      \ Timed Msgs',   # will show up in GRC\n            in_sig=None,\n         \
      \   out_sig=None,\n        )\n        self.message_port_register_out(pmt.intern(\"\
      cron_ft8\"))\n        self.message_port_register_out(pmt.intern(\"cron_ft4\"\
      ))\n\n    def start(self):\n        self.cron_thread = threading.Thread(target=self.cron_ft8,\
      \ daemon=True)\n        self.cron_thread.start()\n        self.cron_thread =\
      \ threading.Thread(target=self.cron_ft4, daemon=True)\n        self.cron_thread.start()\n\
      \n    def sleep(self, interval):\n        time.sleep(interval - (time.time()\
      \ % interval))\n        return True\n\n    def cron_ft8(self):\n        while\
      \ self.sleep(15):\n            self.message_port_pub(pmt.intern(\"cron_ft8\"\
      ), pmt.intern(\"rotate_ft8\"))\n\n    def cron_ft4(self):\n        while self.sleep(7.5):\n\
      \            self.message_port_pub(pmt.intern(\"cron_ft4\"), pmt.intern(\"rotate_ft4\"\
      ))\n\nif __name__ == \"__main__\":\n    b = blk()\n    b.cron_ft8()\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Send Timed Msgs', 'blk', [], [], [('cron_ft4', 'message', 1), ('cron_ft8',
      'message', 1)], 'Send Timed Msgs', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 1240.0]
    rotation: 0
    state: true
- name: ft84_rotate
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport pmt\nimport os\nimport subprocess\n\
      import time\n\nclass blk(gr.basic_block):\n    \"\"\"Rotate wav files and feed\
      \ them to jt9 for FT8 and FT4 decoding\"\"\"\n\n    def __init__(self, tmp_path='.'):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='Rotate\
      \ and Decode Wav File',   # will show up in GRC\n            in_sig=None,\n\
      \            out_sig=None,\n        )\n        self.tmp_path = tmp_path\n\n\
      \        self.message_port_register_in(pmt.intern(\"rotate_ft8\"))\n       \
      \ self.set_msg_handler(pmt.intern(\"rotate_ft8\"), self.rotate_ft8)\n      \
      \  self.message_port_register_in(pmt.intern(\"rotate_ft4\"))\n        self.set_msg_handler(pmt.intern(\"\
      rotate_ft4\"), self.rotate_ft4)\n\n        # remember if we saw decodes in the\
      \ last cycle\n        self.decode = { 'ft8': False, 'ft4': False }\n\n    def\
      \ start(self):\n        # store all decodes in file in PWD\n        self.all_txt\
      \ = open(\"ft84.txt\", \"a\")\n        self.conn = None\n        self.cur =\
      \ None\n\n        # change to tmp_path (jt9 leaves a few temp files around there)\n\
      \        try: os.mkdir(self.tmp_path)\n        except: pass\n        os.chdir(self.tmp_path)\n\
      \n    def handle_line(self, mode, stamp, line):\n        # jt9 out: 000000 \
      \  3  0.3 1743 ~  CQ DF7CB JO31\n        # ALL.TXT: 220321_131530  2400.040\
      \ Rx FT8      1  0.5  523 ES2KO LY1FX 73\n        fields = line.split(None,\
      \ 5)\n        if len(fields) > 5 and fields[0] == \"000000\":\n            try:\n\
      \                db = int(fields[1])\n                dt = float(fields[2])\n\
      \                freq = int(fields[3])\n                prefix = f\"{stamp}\
      \ 2400.040 Rx {mode.upper()}\"\n                data = f\" {db:+3} {dt:+4} {freq:4}\
      \ \"\n                msg = fields[5].rstrip()\n\n                # file output\n\
      \                self.all_txt.write(prefix + data + msg + \"\\n\")\n       \
      \         self.all_txt.flush()\n\n                # terminal output\n      \
      \          if mode == 'ft8':\n                    if stamp[-2:] in ('00', '30'):\n\
      \                        stampcolor = \"\\033[48;5;39m\"\n                 \
      \   else:\n                        stampcolor = \"\\033[48;5;42m\"\n       \
      \         elif mode == 'ft4':\n                    if stamp[-2:] in ('00', '15',\
      \ '30', '45'):\n                        stampcolor = \"\\033[48;5;208m\"\n \
      \                   else:\n                        stampcolor = \"\\033[48;5;220m\"\
      \n                if msg.startswith(\"DF7CB \"): # received my call\n      \
      \              start, end = \"\\033[48;5;226m\", \"\\033[0m\"\n            \
      \    elif \"DF7CB\" in msg: # sent by myself\n                    start, end\
      \ = \"\\033[41m\", \"\\033[0m\"\n                else:\n                   \
      \ start, end = \"\", \"\"\n                print(f\"{stampcolor}{prefix}\\033[0m{data}{start}{msg}{end}\"\
      , flush=True)\n\n                return True # successful decode\n         \
      \   except:\n                pass\n        return False\n\n    def rotate_and_decode(self,\
      \ mode, sink, interval):\n        tmp_file = f\"{mode}-tmp.wav\"\n        decode_file\
      \ = f\"{mode}.wav\"\n\n        # rotate file\n        try: os.unlink(decode_file)\n\
      \        except: pass\n        try: os.rename(tmp_file, decode_file)\n     \
      \   except: pass\n\n        # ask sink to re-open file\n        sink.open(tmp_file)\n\
      \n        stamp = time.strftime('%F_%H%M%S', time.gmtime(time.time() - interval))\n\
      \n        # decode it\n        res = subprocess.run([\"jt9\", \"--\" + mode,\
      \ decode_file], capture_output=True)\n        out = res.stdout.decode()\n\n\
      \        decode = False\n        for line in out.split(\"\\n\"):\n         \
      \   # decode a line\n            decode |= self.handle_line(mode, stamp, line)\n\
      \n        # insert a separator line if we saw something in the last cycle, but\
      \ this cycle was empty\n        if not decode and self.decode[mode]:\n     \
      \       print(flush=True)\n        self.decode[mode] = decode\n\n    def rotate_ft8(self,\
      \ msg):\n        self.rotate_and_decode(\"ft8\", self.tb.ft8_sink, 15)\n\n \
      \   def rotate_ft4(self, msg):\n        self.rotate_and_decode(\"ft4\", self.tb.ft4_sink,\
      \ 7.5)\n"
    affinity: ''
    alias: ''
    comment: FT8/FT4 decoder control logic
    maxoutbuf: '0'
    minoutbuf: '0'
    tmp_path: '''/run/user/1000/gnuradio'''
  states:
    _io_cache: ('Rotate and Decode Wav File', 'blk', [('tmp_path', "'.'")], [('rotate_ft4',
      'message', 1), ('rotate_ft8', 'message', 1)], [], 'Rotate wav files and feed
      them to jt9 for FT8 and FT4 decoding', ['tmp_path'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 1272.0]
    rotation: 0
    state: enabled
- name: ft8_sink
  id: blocks_wavfile_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    bits_per_sample1: FORMAT_PCM_16
    bits_per_sample2: FORMAT_PCM_16
    bits_per_sample3: FORMAT_VORBIS
    bits_per_sample4: FORMAT_PCM_16
    comment: FT8 file output
    file: /dev/null
    format: FORMAT_WAV
    nchan: '1'
    samp_rate: '12000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 980.0]
    rotation: 0
    state: true
- name: inject_tb
  id: snippet
  parameters:
    alias: ''
    code: '# make top block accessible in control block

      self.control.tb = self

      # make top block accessible in ft84_rotate block

      self.ft84_rotate.tb = self'
    comment: ''
    priority: '0'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 28.0]
    rotation: 0
    state: true
- name: limesdr_source
  id: limesdr_source
  parameters:
    affinity: ''
    alias: ''
    allow_tcxo_dac: '0'
    analog_bandw_ch0: 1.5e6
    analog_bandw_ch1: 5e6
    calibr_bandw_ch0: 5e6
    calibr_bandw_ch1: 5e6
    ch_align: 'False'
    channel_mode: '0'
    comment: Receiver
    dacVal: '125'
    digital_bandw_ch0: '0'
    digital_bandw_ch1: '0'
    filename: ''
    gain_dB_ch0: '30'
    gain_dB_ch1: '30'
    lna_path_ch0: '2'
    lna_path_ch1: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    nco_freq_ch0: '0'
    nco_freq_ch1: '0'
    oversample: '0'
    rf_freq: 739.75e6
    samp_rate: samp_rate
    serial: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 436.0]
    rotation: 0
    state: disabled
- name: midi_block
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ mido\nimport threading\n\nclass blk(gr.sync_block):\n    \"\"\"MIDI Source\
      \ block\"\"\"\n\n    def __init__(self, midi_port='DJControl Compact:DJControl\
      \ Compact DJControl Com'):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='MIDI Source',\n            in_sig=None,\n\
      \            out_sig=None,\n        )\n        self.midi_port = midi_port\n\n\
      \        self.message_port_register_in(pmt.intern(\"midi_in\"))\n        self.set_msg_handler(pmt.intern(\"\
      midi_in\"), self.midi_message)\n        self.message_port_register_out(pmt.intern(\"\
      midi_out\"))\n\n    def start(self):\n        self.midiport = mido.open_ioport(self.midi_port)\n\
      \n        self.midithread = threading.Thread(target=self.midi, daemon=True)\n\
      \        self.midithread.start()\n\n    def midi(self):\n        for msg in\
      \ self.midiport:\n\n            if msg.type == 'control_change':\n         \
      \       self.message_port_pub(pmt.intern(\"midi_out\"),\n                  \
      \      pmt.cons(pmt.intern('control_change'),\n                            pmt.cons(pmt.from_long(msg.control),\
      \ pmt.from_long(msg.value))))\n\n            elif msg.type == 'note_on':\n \
      \               self.message_port_pub(pmt.intern(\"midi_out\"),\n          \
      \              pmt.cons(pmt.intern('note_on'),\n                           \
      \ pmt.cons(pmt.from_long(msg.note), pmt.from_long(msg.velocity))))\n       \
      \     else:\n                self.message_port_pub(pmt.intern(\"midi_out\"),\
      \ pmt.string_to_symbol(str(msg)))\n\n    def midi_message(self, msg):\n    \
      \    if not msg.is_pair(): return\n        msgtype = str(pmt.car(msg))\n\n \
      \       if msgtype == 'note_on':\n            payload = pmt.cdr(msg)\n     \
      \       note = pmt.to_long(pmt.car(payload))\n            velocity = pmt.to_long(pmt.cdr(payload))\n\
      \n            self.midiport.send(mido.Message('note_on', note=note, velocity=velocity))\n\
      \n        elif msgtype == 'control_change':\n            payload = pmt.cdr(msg)\n\
      \            control = pmt.to_long(pmt.car(payload))\n            value = pmt.to_long(pmt.cdr(payload))\n\
      \n            self.midiport.send(mido.Message('control_change', control=control,\
      \ value=value))\n\nif __name__ == '__main__':\n    blk()\n"
    affinity: ''
    alias: ''
    comment: MIDI interface
    maxoutbuf: '0'
    midi_port: '''DJControl Compact:DJControl Compact DJControl Com'''
    minoutbuf: '0'
  states:
    _io_cache: ('MIDI Source', 'blk', [('midi_port', "'DJControl Compact:DJControl
      Compact DJControl Com'")], [('midi_in', 'message', 1)], [('midi_out', 'message',
      1)], 'MIDI Source block', ['midi_port'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 716.0]
    rotation: 0
    state: true
- name: rational_resampler_4
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '4'
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 1140.0]
    rotation: 0
    state: true
- name: rx0_high_cutoff_to_msg
  id: blocks_var_to_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msgname: value
    target: rx0_high_cutoff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 308.0]
    rotation: 0
    state: true
- name: rx0_low_cutoff_to_msg
  id: blocks_var_to_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msgname: value
    target: rx0_low_cutoff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 188.0]
    rotation: 0
    state: true
- name: rx_freq_sink
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.1'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: 250e3
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '-50'
    ymin: '-75'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 396.0]
    rotation: 0
    state: disabled
- name: rx_resampler
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    fbw: '0'
    interp: decim
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 212.0]
    rotation: 0
    state: enabled
- name: rx_waterfall
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: Transponder waterfall
    fc: 250e3
    fftsize: '2048'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: 0,0,14,1
    int_max: '-45'
    int_min: '-75'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'True'
    type: complex
    update_time: '0.05'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 544.0]
    rotation: 0
    state: true
- name: tx_audio_source
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: Transmitter audio input
    device_name: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'False'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 212.0]
    rotation: 0
    state: enabled
- name: tx_bandpass
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: tx_power
    high_cutoff_freq: '3000'
    interp: '1'
    low_cutoff_freq: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: 48e3
    type: interp_fir_filter_ccc
    width: '200'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 180.0]
    rotation: 0
    state: enabled
- name: tx_mixer
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 248.0]
    rotation: 0
    state: enabled
- name: tx_power_to_msg
  id: blocks_var_to_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msgname: value
    target: tx_power
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 60.0]
    rotation: 0
    state: true
- name: tx_to_complex
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 232.0]
    rotation: 0
    state: enabled
- name: tx_vfo_signal_source
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: mag
    comment: TX VFO
    freq: tx_vfo - 250e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 364.0]
    rotation: 0
    state: enabled
- name: vfo0_audio_sink
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: Main audio output
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'False'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 868.0]
    rotation: 0
    state: true
- name: vfo0_bandpass
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: decim
    gain: af_gain
    high_cutoff_freq: rx0_high_cutoff
    interp: '1'
    low_cutoff_freq: rx0_low_cutoff
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccc
    width: '100'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 836.0]
    rotation: 0
    state: true
- name: vfo0_mixer
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 872.0]
    rotation: 0
    state: enabled
- name: vfo0_scope_bandpass
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: 2*decim
    gain: '1'
    high_cutoff_freq: 12e3
    interp: '1'
    low_cutoff_freq: -12e3
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccc
    width: '1000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 644.0]
    rotation: 0
    state: true
- name: vfo0_signal_source
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: mag
    comment: 'VFO 0: main receiver'
    freq: 250e3-vfo
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 724.0]
    rotation: 0
    state: enabled
- name: vfo0_spectrum
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.2'
    axislabels: 'True'
    bw: 24e3
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: Spectrum around VFO 0
    ctrlpanel: 'True'
    fc: 40e3
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: 15,0,14,1
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: ''
    nconnections: '1'
    norm_window: 'True'
    showports: 'True'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.01'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_HAMMING
    ymax: '-40'
    ymin: '-90'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 708.0]
    rotation: 0
    state: enabled
- name: vfo0_to_float
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 872.0]
    rotation: 0
    state: true
- name: vfo0_waterfall_add
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: Display VFO 0 in waterfall
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 528.0]
    rotation: 0
    state: true
- name: vfo0_waterfall_atten
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.01'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 572.0]
    rotation: 0
    state: true
- name: vfo2_audio_sink
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: FT8/FT4 audio output
    device_name: pipewire
    num_inputs: '1'
    ok_to_block: 'False'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 1036.0]
    rotation: 0
    state: true
- name: vfo2_bandpass
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: decim
    gain: '10'
    high_cutoff_freq: '5000'
    interp: '1'
    low_cutoff_freq: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccc
    width: '1000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 1012.0]
    rotation: 0
    state: true
- name: vfo2_mixer
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 1048.0]
    rotation: 0
    state: enabled
- name: vfo2_signal_source
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: mag
    comment: 'VFO 2: FT8/FT4 receiver'
    freq: 250e3-40e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 1028.0]
    rotation: 0
    state: enabled
- name: vfo2_to_float
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 1048.0]
    rotation: 0
    state: true
- name: zeromq_pull_source_0
  id: zeromq_pull_source
  parameters:
    address: tcp://192.168.0.11:10010
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    hwm: zmq_watermark
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 620.0]
    rotation: 0
    state: enabled
- name: zeromq_push_sink_0
  id: zeromq_push_sink
  parameters:
    address: tcp://0.0.0.0:10024
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    hwm: zmq_watermark
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 364.0]
    rotation: 0
    state: enabled

connections:
- [blocks_swapiq_0, '0', vfo0_waterfall_atten, '0']
- [control, midi_out, midi_block, midi_in]
- [control, rx_freq_out, vfo, valuein]
- [control, tx_freq_out, tx_vfo, valuein]
- [ft84_cron, cron_ft4, ft84_rotate, rotate_ft4]
- [ft84_cron, cron_ft8, ft84_rotate, rotate_ft8]
- [limesdr_source, '0', rx_freq_sink, '0']
- [limesdr_source, '0', vfo0_mixer, '0']
- [limesdr_source, '0', vfo0_waterfall_add, '0']
- [limesdr_source, '0', vfo2_mixer, '0']
- [midi_block, midi_out, blocks_message_debug_0, print]
- [midi_block, midi_out, control, midi_in]
- [rational_resampler_4, '0', ft4_sink, '0']
- [rational_resampler_4, '0', ft8_sink, '0']
- [rx0_high_cutoff_to_msg, msgout, high_cutoff_gauge, value]
- [rx0_low_cutoff_to_msg, msgout, low_cutoff_gauge, value]
- [rx_resampler, '0', tx_mixer, '0']
- [rx_waterfall, freq, vfo, valuein]
- [tx_audio_source, '0', tx_to_complex, '0']
- [tx_bandpass, '0', rx_resampler, '0']
- [tx_mixer, '0', zeromq_push_sink_0, '0']
- [tx_power_to_msg, msgout, tx_power_gauge, value]
- [tx_to_complex, '0', tx_bandpass, '0']
- [tx_vfo, valueout, control, tx_freq_in]
- [tx_vfo_signal_source, '0', tx_mixer, '1']
- [vfo, valueout, control, rx_freq_in]
- [vfo, valueout, vfo0_spectrum, freq]
- [vfo0_bandpass, '0', vfo0_to_float, '0']
- [vfo0_mixer, '0', vfo0_bandpass, '0']
- [vfo0_mixer, '0', vfo0_scope_bandpass, '0']
- [vfo0_scope_bandpass, '0', vfo0_spectrum, '0']
- [vfo0_signal_source, '0', blocks_swapiq_0, '0']
- [vfo0_signal_source, '0', vfo0_mixer, '1']
- [vfo0_spectrum, freq, vfo, valuein]
- [vfo0_spectrum, freq, vfo0_spectrum, freq]
- [vfo0_to_float, '0', vfo0_audio_sink, '0']
- [vfo0_waterfall_add, '0', rx_waterfall, '0']
- [vfo0_waterfall_atten, '0', vfo0_waterfall_add, '1']
- [vfo2_bandpass, '0', vfo2_to_float, '0']
- [vfo2_mixer, '0', vfo2_bandpass, '0']
- [vfo2_signal_source, '0', vfo2_mixer, '1']
- [vfo2_to_float, '0', rational_resampler_4, '0']
- [vfo2_to_float, '0', vfo2_audio_sink, '0']
- [zeromq_pull_source_0, '0', vfo0_mixer, '0']
- [zeromq_pull_source_0, '0', vfo0_waterfall_add, '0']
- [zeromq_pull_source_0, '0', vfo2_mixer, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
