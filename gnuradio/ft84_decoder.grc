options:
  parameters:
    author: DF7CB
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: GPL-3+
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: ft84_decoder
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: FT8 and FT4 Decoder
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 48e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 12.0]
    rotation: 0
    state: enabled
- name: audio_source_rx2
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: pulse:rx2.monitor
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 180.0]
    rotation: 0
    state: true
- name: cron
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport pmt\nimport time\nimport threading\n\
      \nclass blk(gr.basic_block):\n    \"\"\"Send Timed Msgs\"\"\"\n\n    def __init__(self):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='Send\
      \ Timed Msgs',   # will show up in GRC\n            in_sig=None,\n         \
      \   out_sig=None,\n        )\n        self.message_port_register_out(pmt.intern(\"\
      cron_ft8\"))\n        self.message_port_register_out(pmt.intern(\"cron_ft4\"\
      ))\n\n    def start(self):\n        self.cron_thread = threading.Thread(target=self.cron_ft8,\
      \ daemon=True)\n        self.cron_thread.start()\n        self.cron_thread =\
      \ threading.Thread(target=self.cron_ft4, daemon=True)\n        self.cron_thread.start()\n\
      \n    def sleep(self, interval):\n        time.sleep(interval - (time.time()\
      \ % interval))\n        return True\n\n    def cron_ft8(self):\n        while\
      \ self.sleep(15):\n            self.message_port_pub(pmt.intern(\"cron_ft8\"\
      ), pmt.intern(\"rotate_ft8\"))\n\n    def cron_ft4(self):\n        while self.sleep(7.5):\n\
      \            self.message_port_pub(pmt.intern(\"cron_ft4\"), pmt.intern(\"rotate_ft4\"\
      ))\n\nif __name__ == \"__main__\":\n    b = blk()\n    b.cron_ft8()\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Send Timed Msgs', 'blk', [], [], [('cron_ft4', 'message', 1), ('cron_ft8',
      'message', 1)], 'Send Timed Msgs', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 336.0]
    rotation: 0
    state: true
- name: ft4_sink
  id: blocks_wavfile_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    bits_per_sample1: FORMAT_PCM_16
    bits_per_sample2: FORMAT_PCM_16
    bits_per_sample3: FORMAT_VORBIS
    bits_per_sample4: FORMAT_PCM_16
    comment: ''
    file: /dev/null
    format: FORMAT_WAV
    nchan: '1'
    samp_rate: '12000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 292.0]
    rotation: 0
    state: enabled
- name: ft84_init
  id: snippet
  parameters:
    alias: ''
    code: '# make top block accessible in rotate block

      self.rotate.tb = self'
    comment: ''
    priority: '1'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 12.0]
    rotation: 0
    state: enabled
- name: ft8_sink
  id: blocks_wavfile_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    bits_per_sample1: FORMAT_PCM_16
    bits_per_sample2: FORMAT_PCM_16
    bits_per_sample3: FORMAT_VORBIS
    bits_per_sample4: FORMAT_PCM_16
    comment: ''
    file: /dev/null
    format: FORMAT_WAV
    nchan: '1'
    samp_rate: '12000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 156.0]
    rotation: 0
    state: true
- name: rational_resampler_4
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '4'
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 164.0]
    rotation: 0
    state: true
- name: rotate
  id: epy_block
  parameters:
    PG_conn: '''service=cb'''
    _source_code: "from gnuradio import gr\nimport pmt\nimport os\nimport subprocess\n\
      import time\nimport psycopg2\nimport re\n\nclass blk(gr.basic_block):\n    \"\
      \"\"Rotate wav files and feed them to jt9 for FT8 and FT4 decoding\"\"\"\n\n\
      \    def __init__(self, tmp_path='.', PG_conn=''):\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Rotate and Decode Wav File',   # will\
      \ show up in GRC\n            in_sig=None,\n            out_sig=None,\n    \
      \    )\n        self.tmp_path = tmp_path\n        self.pg_conn = PG_conn\n\n\
      \        self.message_port_register_in(pmt.intern(\"rotate_ft8\"))\n       \
      \ self.set_msg_handler(pmt.intern(\"rotate_ft8\"), self.rotate_ft8)\n      \
      \  self.message_port_register_in(pmt.intern(\"rotate_ft4\"))\n        self.set_msg_handler(pmt.intern(\"\
      rotate_ft4\"), self.rotate_ft4)\n\n    def start(self):\n        # store all\
      \ decodes in file in PWD\n        self.all_txt = open(\"ft84.txt\", \"a\")\n\
      \        self.conn = None\n        self.cur = None\n\n        # change to tmp_path\
      \ (jt9 leaves a few temp files around there)\n        try: os.mkdir(self.tmp_path)\n\
      \        except: pass\n        os.chdir(self.tmp_path)\n\n    def query(self,\
      \ *args):\n        if not self.conn:\n            try:\n                self.conn\
      \ = psycopg2.connect(self.pg_conn)\n                self.conn.autocommit = True\n\
      \                self.cur = self.conn.cursor()\n            except Exception\
      \ as e:\n                print(e)\n                return\n        self.cur.execute(*args)\n\
      \        return self.cur\n\n    def handle_line(self, mode, stamp, line):\n\
      \        \"\"\"000000   3  0.3 1743 ~  CQ DF7CB JO31\"\"\"\n        fields =\
      \ line.split(None, 5)\n        if len(fields) > 5 and fields[0] == \"000000\"\
      :\n\n            # start timestamptz,\n            # qrg numeric,\n        \
      \    # rx text,\n            # mode text,\n            # rst int,\n        \
      \    # off numeric, -- time offset\n            # freq int,\n            # msg\
      \ text,\n\n            msg = fields[5].rstrip()\n            self.query(\"\"\
      \"insert into all_txt values(%s, %s, %s, %s, %s, %s, %s, %s) on conflict do\
      \ nothing\"\"\", (stamp, 2400.040, 'Rx', mode.upper(), fields[1], fields[2],\
      \ fields[3], msg))\n\n            call_re = '<?(?:([A-Z0-9/]+)|\\.\\.\\.)>?'\
      \ # also matches CQ\n            loc_rrr_re = '(?:([A-R]{2}[0-9]{2})|R?[+-][0-9]+|RRR|73)'\
      \ # only loc captured\n\n            if m := re.match(f\"{call_re} {call_re}(?:\
      \ {loc_rrr_re})?\\\\b\", msg):\n                dx, call, loc = m.group(1),\
      \ m.group(2), m.group(3)\n\n                if call == \"DF7CB\":\n        \
      \            print(\"\\033[41m\", end='')\n                elif call:\n    \
      \                logged = self.query(\"\"\"select call from log where call =\
      \ %s and mode in ('FT8', 'FT4') and qrg::band = '13cm'\"\"\", (call,)).fetchone()\n\
      \                    if not logged:\n                        print(\"\\033[46m\"\
      , end='')\n\n                if loc and loc != \"RR73\":\n                 \
      \   logged = self.query(\"\"\"select call from log where loc::varchar(4) = %s\
      \ and mode in ('FT8', 'FT4') and qrg::band = '13cm'\"\"\", (loc,)).fetchone()\n\
      \                    if not logged:\n                        print(\"\\033[43m\"\
      , end='')\n\n                if dx == 'DF7CB':\n                    print(\"\
      \\033[48;5;226m\", end='')\n\n            else:\n                print(\"Unknown\
      \ format: \", end='')\n\n            out = f\"{mode} {stamp} {line[7:]}\"\n\
      \            self.all_txt.write(out + \"\\n\")\n            self.all_txt.flush()\n\
      \            print(out, end=\"\\033[0m\\n\")\n\n    def rotate_and_decode(self,\
      \ mode, sink, interval):\n        tmp_file = f\"{mode}-tmp.wav\"\n        decode_file\
      \ = f\"{mode}.wav\"\n\n        # rotate file\n        try: os.unlink(decode_file)\n\
      \        except: pass\n        try: os.rename(tmp_file, decode_file)\n     \
      \   except: pass\n\n        # ask sink to re-open file\n        sink.open(tmp_file)\n\
      \n        stamp = time.strftime('%F %H%M%S', time.gmtime(time.time() - interval))\n\
      \n        # decode it\n        res = subprocess.run([\"jt9\", \"--\" + mode,\
      \ decode_file], capture_output=True)\n        out = res.stdout.decode()\n\n\
      \        for line in out.split(\"\\n\"):\n            self.handle_line(mode,\
      \ stamp, line)\n\n    def rotate_ft8(self, msg):\n        self.rotate_and_decode(\"\
      ft8\", self.tb.ft8_sink, 15)\n\n    def rotate_ft4(self, msg):\n        self.rotate_and_decode(\"\
      ft4\", self.tb.ft4_sink, 7.5)\n\nif __name__ == \"__main__\":\n    b = blk()\n\
      \    b.rotate('foo')\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tmp_path: '''/run/user/1000/gnuradio'''
  states:
    _io_cache: ('Rotate and Decode Wav File', 'blk', [('tmp_path', "'.'"), ('PG_conn',
      "''")], [('rotate_ft8', 'message', 1), ('rotate_ft4', 'message', 1)], [], 'Rotate
      wav files and feed them to jt9 for FT8 and FT4 decoding', ['tmp_path'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 364.0]
    rotation: 0
    state: enabled

connections:
- [audio_source_rx2, '0', rational_resampler_4, '0']
- [cron, cron_ft4, rotate, rotate_ft4]
- [cron, cron_ft8, rotate, rotate_ft8]
- [rational_resampler_4, '0', ft4_sink, '0']
- [rational_resampler_4, '0', ft8_sink, '0']

metadata:
  file_format: 1
