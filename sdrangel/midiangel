#!/usr/bin/python3
'''
Use a Hercules DJ - DJControl Compact MIDI device with SDRangel

Listens on a TCP port for SDRangel reverse API requests.
'''

import Hamlib
import mido
import requests
import time
import threading
import argparse
from flask import Flask
from flask import request, jsonify

tx_center_freq = 2_399_000_000
freq_offset = 1_250_000 # TX tuned 1.25 MHz below TPX passband center

SDRANGEL_API_ADDR = None
SDRANGEL_API_PORT = 8091

sdrangel_ip = '127.0.0.1'
rx_device = 0
rx_channel_index = 0
tx_device = 1
tx_channel_index = 0
base_url = f'http://{sdrangel_ip}:{SDRANGEL_API_PORT}/sdrangel'
rxdev_url = base_url + f'/deviceset/{rx_device}/device/settings'
rxch_url = [
        base_url + f'/deviceset/{rx_device}/channel/0/settings',
        base_url + f'/deviceset/{rx_device}/channel/1/settings',
        base_url + f'/deviceset/{rx_device}/channel/2/settings',
        ]
txdev_url = base_url + f'/deviceset/{tx_device}/device/settings'
txch0_url = base_url + f'/deviceset/{tx_device}/channel/0/settings'

MIDI_PRESS = 127
MIDI_RELEASE = 0

MIDI_CUE_KP1_A = 1
MIDI_CUE_KP2_A = 2
MIDI_CUE_KP3_A = 3
MIDI_CUE_KP4_A = 4
MIDI_PLAY_A = 33
MIDI_CUE_A = 34
MIDI_SYNC_A = 35
MIDI_REC = 43
MIDI_SCRATCH = 45
MIDI_JOG_A = 48
MIDI_JOG_B = 49
MIDI_CUE_KP1_B = 49
MIDI_CUE_KP2_B = 50
MIDI_CUE_KP3_B = 51
MIDI_CUE_KP4_B = 52
MIDI_CROSSFADE = 54
MIDI_VOL_A = 57
MIDI_TREB_A = 59
MIDI_BASS_A = 60
MIDI_VOL_B = 61
MIDI_TREB_B = 63
MIDI_BASS_B = 64
MIDI_PLAY_B = 81
MIDI_CUE_B = 82
MIDI_SYNC_B = 83
MIDI_READ_ALL = 0x7f

AUDIO_USB_OUTPUT= 'alsa_output.usb-Plantronics_Plantronics_Blackwire_3220_Series_24C16E47570F4914863034C5033A0005-00.analog-stereo'
AUDIO_USB_INPUT = 'alsa_input.usb-Plantronics_Plantronics_Blackwire_3220_Series_24C16E47570F4914863034C5033A0005-00.analog-stereo'

Hamlib.rig_set_debug(Hamlib.RIG_DEBUG_NONE)
my_rig = Hamlib.Rig(Hamlib.RIG_MODEL_NETRIGCTL)
midiport = None
settings = {}
app = Flask(__name__)

# ======================================================================
def getInputOptions():
    """ This is the argument line parser """
# ----------------------------------------------------------------------
    parser = argparse.ArgumentParser(description="Manages PTT from an SDRangel instance automatically")
    parser.add_argument("-A", "--address", dest="addr", help="listening address (default 0.0.0.0)", metavar="IP", type=str)
    parser.add_argument("-P", "--port", dest="port", help="listening port (default 8888)", metavar="PORT", type=int)
    parser.add_argument("-a", "--address-sdr", dest="sdrangel_address", help="SDRangel REST API address (defaults to calling address)", metavar="ADDRESS", type=str)
    parser.add_argument("-p", "--port-sdr", dest="sdrangel_port", help="SDRangel REST API port (default 8091)", metavar="PORT", type=int)

    options = parser.parse_args()

    if options.addr == None:
        options.addr = "0.0.0.0"
    if options.port == None:
        options.port = 8888
    if options.sdrangel_port == None:
        options.sdrangel_port = 8091

    return options.addr, options.port, options.sdrangel_address, options.sdrangel_port

# ======================================================================
def patch_txdev(content):
    requests.patch(url=txdev_url, json={'deviceHwType': 'LimeSDR',
        'direction': 1,
        'limeSdrOutputSettings': content,
        'originatorIndex': 1})

def patch_tx(content):
    requests.patch(url=txch0_url, json={'SSBModSettings': content,
        'channelType': 'SSBMod',
        'direction': 1,
        'originatorDeviceSetIndex': 1,
        'originatorChannelIndex': 0,
        })

def patch_rx(rx_channel_index, content):
    requests.patch(url=rxch_url[rx_channel_index], json={
        'SSBDemodSettings': content,
        'channelType': 'SSBDemod',
        'direction': 0,
        'originatorDeviceSetIndex': 0,
        'originatorChannelIndex': 0,
        })

# ======================================================================
@app.route('/sdrangel/deviceset/<int:deviceset_index>/device/settings', methods=['GET', 'PATCH', 'PUT'])
def device_settings(deviceset_index):
    """ Receiving device settings from reverse API """
# ----------------------------------------------------------------------
    content = request.get_json(silent=True)
    # {'deviceHwType': 'LimeSDR', 'direction': 1, 'limeSdrOutputSettings': {'gain': 67}, 'originatorIndex': 1}
    # reverse API requests seem to all go to 0,0, use channel values from inside json
    deviceset_index = content['originatorIndex']

    ## store settings
    if 'limeSdrInputSettings' in content:
        new_settings = content['limeSdrInputSettings']
        settings[deviceset_index]['limeSdrInputSettings'] |= new_settings
    elif 'limeSdrOutputSettings' in content:
        new_settings = content['limeSdrOutputSettings']
        settings[deviceset_index]['limeSdrOutputSettings'] |= new_settings
    else:
        print("Unknown deviceset reverse API request:", content)

    return "OK processed "

# ======================================================================
@app.route('/sdrangel/deviceset/<int:deviceset_index>/channel/<int:channel_index>/settings', methods=['GET', 'PATCH', 'PUT'])
def channel_settings(deviceset_index, channel_index):
    """ Receiving channel settings from reverse API """
# ----------------------------------------------------------------------
    content = request.get_json(silent=True)
    print('Reverse API request:', content)
    # {'channelType': 'SSBMod', 'direction': 1, 'originatorChannelIndex': 0, 'originatorDeviceSetIndex': 1}
    # {'SSBModSettings': {'modAFInput': 1}, 'channelType': 'SSBMod', 'direction': 1, 'originatorChannelIndex': 0, 'originatorDeviceSetIndex': 1}
    # {'SSBDemodSettings': {'inputFrequencyOffset': -243998}, 'channelType': 'SSBDemod', 'direction': 0, 'originatorChannelIndex': 0, 'originatorDeviceSetIndex': 0}

    # reverse API requests seem to all go to 0,0, use channel values from inside json
    deviceset_index = content['originatorDeviceSetIndex']
    channel_index = content['originatorChannelIndex']

    # store settings
    #if (deviceset_index, channel_index) not in settings:
    #    settings[deviceset_index, channel_index] = {}
    if 'SSBDemodSettings' in content:
        new_settings = content['SSBDemodSettings']
        settings[deviceset_index, channel_index]['SSBDemodSettings'] |= new_settings

        if 'inputFrequencyOffset' in new_settings:
            freq = new_settings['inputFrequencyOffset']
            if channel_index == 0 and settings['sync_a'] or channel_index == 1 and settings['sync_b']:
                patch_tx({'inputFrequencyOffset': freq + freq_offset})

    elif 'SSBModSettings' in content:
        new_settings = content['SSBModSettings']
        settings[deviceset_index, channel_index]['SSBModSettings'] |= new_settings

        if 'inputFrequencyOffset' in new_settings:
            freq = new_settings['inputFrequencyOffset']
            my_rig.set_freq(Hamlib.RIG_VFO_A, tx_center_freq + freq)

        if 'modAFInput' in content['SSBModSettings']:
            if new_settings['modAFInput'] == 0: # off
                midiport.send(mido.Message('note_on', note=MIDI_REC, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_PLAY_B, velocity=MIDI_RELEASE))
            elif new_settings['modAFInput'] == 1: # CW carrier
                midiport.send(mido.Message('note_on', note=MIDI_REC, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_B, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_PLAY_B, velocity=MIDI_RELEASE))
            elif new_settings['modAFInput'] == 3: # SSB
                midiport.send(mido.Message('note_on', note=MIDI_REC, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_B, velocity=MIDI_RELEASE))
                v = MIDI_PRESS if settings[tx_device, tx_channel_index]['SSBModSettings']['audioDeviceName'] == AUDIO_USB_INPUT else MIDI_RELEASE
                midiport.send(mido.Message('note_on', note=MIDI_PLAY_B, velocity=v))

    else:
        print("Unknown deviceset reverse API request:", content)

    return "OK processed "

def midi_set(note, state=True):
    global midiport
    velocity = MIDI_PRESS if state else MIDI_RELEASE
    midiport.send(mido.Message('note_on', note=note, velocity=velocity))

def midiloop():
    global midiport
    global rx_channel_index
    print('midiloop starting')
    #midiport.send(mido.Message('control_change', control=MIDI_READ_ALL, value=0x00)) # read all MIDI settings

    settings['sync_a'] = True
    settings['sync_b'] = False
    settings['sync_c'] = False

    midi_set(MIDI_CUE_KP1_A, True)
    midi_set(MIDI_CUE_KP2_A, False)
    midi_set(MIDI_CUE_KP3_A, False)
    midi_set(MIDI_CUE_KP4_A, False)
    midi_set(MIDI_SYNC_A, settings['sync_a'])
    midi_set(MIDI_CUE_A, False)
    midi_set(MIDI_PLAY_A, False)

    midi_set(MIDI_CUE_KP1_B, True)
    midi_set(MIDI_CUE_KP2_B, False)
    midi_set(MIDI_CUE_KP3_B, False)
    midi_set(MIDI_CUE_KP4_B, False)
    midi_set(MIDI_SYNC_B, settings['sync_b'])
    midi_set(MIDI_CUE_B, False)
    midi_set(MIDI_PLAY_B, False)

    midi_set(MIDI_SCRATCH, settings['sync_c'])

    last_tick_a = 0
    last_tick_b = 0

    while True:
        freq_step_a = 0
        freq_step_b = 0
        tx_gain = None
        new_settings = {}

        # block waiting for the first message, and then read everything pending
        msgs = [midiport.receive()]
        time.sleep(0.1)
        for msg in midiport.iter_pending():
            msgs.append(msg)

        # process messages read
        for msg in msgs:

            #MIDI: control_change channel=0 control=54 value=65 time=0
            if msg.type == 'control_change' and msg.control == MIDI_CROSSFADE:
                tx_gain = 60.0 + int(msg.value / 127.0 * 10.0)

            elif msg.type == 'control_change' and msg.control == MIDI_JOG_A:
                tick = msg.value
                if tick > 64: tick -= 128
                # remove hysteresis on changing direction
                if last_tick_a < 0 and tick == 2:
                    tick = 1
                elif last_tick_a > 0 and tick == -2:
                    tick = -1
                last_tick_a = tick
                freq_step_a += tick

            elif msg.type == 'control_change' and msg.control == MIDI_JOG_B:
                tick = msg.value
                if tick > 64: tick -= 128
                # remove hysteresis on changing direction
                if last_tick_b < 0 and tick == 2:
                    tick = 1
                elif last_tick_b > 0 and tick == -2:
                    tick = -1
                last_tick_b = tick
                freq_step_b += tick

            elif msg.type == 'note_on' and msg.note == MIDI_REC and msg.velocity == MIDI_PRESS:
                #print(settings)
                print("REC pressed")
                if settings[tx_device, tx_channel_index]['SSBModSettings']['modAFInput'] == 0:
                    patch_tx({'modAFInput': 3})
                else:
                    patch_tx({'modAFInput': 0})

            elif msg.type == 'note_on' and msg.note == MIDI_PLAY_B and msg.velocity == MIDI_PRESS:
                patch_tx({'audioDeviceName': AUDIO_USB_INPUT})
                if settings[tx_device, tx_channel_index]['SSBModSettings']['modAFInput'] == 0:
                    patch_tx({'modAFInput': 3})
                else:
                    patch_tx({'modAFInput': 0})

            elif msg.type == 'note_on' and msg.note == MIDI_CUE_KP1_A and msg.velocity == MIDI_PRESS:
                patch_rx(rx_channel_index, {'audioDeviceName': 'System default device'})
                patch_tx({'audioDeviceName': 'System default device'})
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP1_A, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP2_A, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP3_A, velocity=MIDI_RELEASE))
            elif msg.type == 'note_on' and msg.note == MIDI_CUE_KP2_A and msg.velocity == MIDI_PRESS:
                patch_rx(rx_channel_index, {'audioDeviceName': AUDIO_USB_OUTPUT})
                patch_tx({'audioDeviceName': AUDIO_USB_INPUT})
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP1_A, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP2_A, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP3_A, velocity=MIDI_RELEASE))
            elif msg.type == 'note_on' and msg.note == MIDI_CUE_KP3_A and msg.velocity == MIDI_PRESS:
                patch_tx({'audioDeviceName': 'tx0.monitor'})
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP1_A, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP2_A, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP3_A, velocity=MIDI_PRESS))

            elif msg.type == 'note_on' and msg.note in (MIDI_CUE_KP1_B, MIDI_CUE_KP2_B, MIDI_CUE_KP3_B) and msg.velocity == MIDI_PRESS:
                rx_channel_index = msg.note - MIDI_CUE_KP1_B
                print('Switching to RX channel', rx_channel_index)
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP1_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP2_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP3_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=msg.note, velocity=MIDI_PRESS))
                if settings['sync_b']:
                    tx = settings[rx_device, rx_channel_index]['SSBDemodSettings']['inputFrequencyOffset']
                    patch_tx({'inputFrequencyOffset': tx + freq_offset})

            elif msg.type == 'note_on' and msg.note == MIDI_CUE_B:
                if msg.velocity == MIDI_PRESS:
                    patch_tx({'modAFInput': 1}) # CW carrier
                else:
                    patch_tx({'modAFInput': 0})

            elif msg.type == 'note_on' and msg.note == MIDI_SYNC_A and msg.velocity == MIDI_PRESS:
                settings['sync_a'] = not settings['sync_a']
                midi_set(MIDI_SYNC_A, settings['sync_a'])
                if settings['sync_a']:
                    settings['sync_b'] = False
                    midi_set(MIDI_SYNC_B, settings['sync_b'])
                    settings['sync_c'] = False
                    midi_set(MIDI_SCRATCH, settings['sync_c'])
                    tx = settings[rx_device, 0]['SSBDemodSettings']['inputFrequencyOffset']
                    patch_tx({'inputFrequencyOffset': tx + freq_offset})

            elif msg.type == 'note_on' and msg.note == MIDI_SYNC_B and msg.velocity == MIDI_PRESS:
                settings['sync_b'] = not settings['sync_b']
                midi_set(MIDI_SYNC_B, settings['sync_b'])
                if settings['sync_b']:
                    settings['sync_a'] = False
                    midi_set(MIDI_SYNC_A, settings['sync_a'])
                    settings['sync_c'] = False
                    midi_set(MIDI_SCRATCH, settings['sync_c'])
                    tx = settings[rx_device, 1]['SSBDemodSettings']['inputFrequencyOffset']
                    patch_tx({'inputFrequencyOffset': tx + freq_offset})

            elif msg.type == 'note_on' and msg.note == MIDI_SCRATCH and msg.velocity == MIDI_PRESS:
                settings['sync_c'] = not settings['sync_c']
                midi_set(MIDI_SCRATCH, settings['sync_c'])
                if settings['sync_c']:
                    settings['sync_a'] = False
                    midi_set(MIDI_SYNC_A, settings['sync_a'])
                    settings['sync_b'] = False
                    midi_set(MIDI_SYNC_B, settings['sync_b'])
                    tx = settings[rx_device, 2]['SSBDemodSettings']['inputFrequencyOffset']
                    patch_tx({'inputFrequencyOffset': tx + freq_offset})

            elif msg.type == 'control_change' and msg.control == MIDI_VOL_A:
                vol = 10 ** ((msg.value - 64) / 63.0)
                if msg.value == 0:
                    vol = 0
                new_settings.setdefault(0, {})
                new_settings[0] |= {'volume': vol}
            elif msg.type == 'control_change' and msg.control == MIDI_VOL_B:
                vol = 10 ** ((msg.value - 64) / 63.0)
                new_settings.setdefault(1, {})
                new_settings[1] |= {'volume': vol}
            elif msg.type == 'control_change' and msg.control == MIDI_BASS_A:
                low = 20 * msg.value
                new_settings.setdefault(0, {})
                new_settings[0] |= {'lowCutoff': low}
            elif msg.type == 'control_change' and msg.control == MIDI_BASS_B:
                low = 20 * msg.value
                new_settings.setdefault(1, {})
                new_settings[1] |= {'lowCutoff': low}
            elif msg.type == 'control_change' and msg.control == MIDI_TREB_A:
                high = 3000 - 20 * (127-msg.value)
                new_settings.setdefault(0, {})
                new_settings[0] |= {'rfBandwidth': high}
            elif msg.type == 'control_change' and msg.control == MIDI_TREB_B:
                high = 3000 - 20 * (127-msg.value)
                new_settings.setdefault(1, {})
                new_settings[1] |= {'rfBandwidth': high}

            else:
                print('Unhandled MIDI msg:', msg) #, msg.bytes())

        for rx_channel in new_settings:
            patch_rx(rx_channel, new_settings[rx_channel])

        if tx_gain is not None and tx_gain != settings[tx_device]['limeSdrOutputSettings']['gain']:
            print("Setting TX gain to", tx_gain)
            patch_txdev({'gain': tx_gain})
            #time.sleep(0.5)

        if freq_step_a != 0:
            scaled_freq_step = 10 * (-1)**(freq_step_a < 0) * int(abs(freq_step_a)**1.7)
            #print('Updating freq:', freq_step_a, scaled_freq_step)
            qrg = settings[rx_device, 0]['SSBDemodSettings']['inputFrequencyOffset'] + scaled_freq_step
            patch_rx(0, {'inputFrequencyOffset': qrg})

            # ... now sleep a bit so we aren't sending too many frequency changes at once
            #time.sleep(0.1)

        if freq_step_b != 0:
            scaled_freq_step = 10 * (-1)**(freq_step_b < 0) * int(abs(freq_step_b)**1.7)
            #print('Updating freq:', freq_step_b, scaled_freq_step)
            qrg = settings[rx_device, 1]['SSBDemodSettings']['inputFrequencyOffset'] + scaled_freq_step
            patch_rx(1, {'inputFrequencyOffset': qrg})

            # ... now sleep a bit so we aren't sending too many frequency changes at once
            #time.sleep(0.1)

# ======================================================================
def main():
    """ This is the main routine """
# ----------------------------------------------------------------------
    my_rig.set_conf("rig_pathname", "localhost:4534")
    my_rig.open()

    global SDRANGEL_API_ADDR
    global SDRANGEL_API_PORT
    addr, port, SDRANGEL_API_ADDR, SDRANGEL_API_PORT = getInputOptions()
    sdrangel_ip = '127.0.0.1'

    rx_status = requests.get(url=rxdev_url)
    if rx_status.status_code // 100 != 2:
        print('Failed to request', rxdev_url)
    print('Initial RX status:', rx_status.json())
    settings[rx_device] = rx_status.json()

    for rx_channel_index in range(3):
        rx_status = requests.get(url=rxch_url[rx_channel_index])
        if rx_status.status_code // 100 != 2:
            print('Failed to request', rxch_url[rx_channel_index])
        print('Initial RX status:', rx_status.json())
        settings[rx_device, rx_channel_index] = rx_status.json()

    tx_status = requests.get(url=txdev_url)
    if tx_status.status_code // 100 != 2:
        print('Failed to request', txdev_url)
    print('Initial TX status:', tx_status.json())
    settings[tx_device] = tx_status.json()

    tx_status = requests.get(url=txch0_url)
    if tx_status.status_code // 100 != 2:
        print('Failed to request', txch0_url)
    print('Initial TX status:', tx_status.json())
    settings[tx_device, tx_channel_index] = tx_status.json()

    global midiport
    midiport = mido.open_ioport('DJControl Compact:DJControl Compact DJControl Com 24:0')
    threading.Thread(target=midiloop, daemon=True).start()

    print(f'main: starting at: {addr}:{port}')
    app.run(debug=True, host=addr, port=port, use_reloader=False)


# ======================================================================
if __name__ == "__main__":
    """ When called from command line... """
# ----------------------------------------------------------------------
    main()
